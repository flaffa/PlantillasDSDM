[comment encoding = UTF-8 /]
[module generateBaseServiceImp('http://www.example.org/diagramaClases')]


[template public generateBaseServiceImp(d : DiagramadeClases)]

[file ('src/main/java/'+ d.artefactos_contenidos.groupID.substituteAll('.', '/')+'/'+ d.artefactos_contenidos.artefactID+'/servicios/BaseServiceImp.java', false, 'UTF-8')]
package [d.artefactos_contenidos.groupID+'.'+d.artefactos_contenidos.artefactID/].servicios;
import [d.artefactos_contenidos.groupID/].[d.artefactos_contenidos.artefactID/].entidades.Base;
import [d.artefactos_contenidos.groupID/].[d.artefactos_contenidos.artefactID/].repositorios.BaseRepository;

import java.io.Serializable;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

public abstract class BaseServiceImp<E extends Base, ID extends Serializable> implements BaseService<E,ID> {
    
    protected BaseRepository<E, ID> baseRepository;

    public BaseServiceImp (BaseRepository<E,ID> baseRepository){
        this.baseRepository = baseRepository;
    }

    @Override
    @Transactional
    public List<E> findAll() throws Exception {
        try{
            List<E> entidades = baseRepository.findAll();
            return entidades;
        } catch (Exception e){
            throw new Exception (e.getMessage());
        }
    }

    @Override
    @Transactional
    public E findById(ID id) throws Exception {
        try{
            Optional <E> entidadiopcional = baseRepository.findById(id);
            return entidadiopcional.get();
        } catch (Exception e){
            throw new Exception(e.getMessage());
        }
    }

    @Override
    @Transactional
    public E save (E entidad) throws Exception {
        try{
            entidad = baseRepository.save(entidad);
            return entidad;
        } catch (Exception e){
            throw new Exception(e.getMessage());
        }
    }

    @Override
    @Transactional
    public E update (E entidad, ID id) throws Exception {
        try{
            Optional <E> entidadOpcional = baseRepository.findById(id);
            E entidadUpdate = entidadOpcional.get();
            entidadUpdate = baseRepository.save(entidad);
            return entidadUpdate;
        } catch (Exception e){
            throw new Exception(e.getMessage());
        }
    }

    @Override
    @Transactional
    public boolean delete(ID id) throws Exception {
        try{
            if (baseRepository.existsById(id)){
                baseRepository.deleteById(id);
                return true;
            } else {
                throw new Exception();
            }
        } catch (Exception e){
            throw new Exception(e.getMessage());
        }
    }

}
[/file]
[/template]
